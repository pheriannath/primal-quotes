{"version":3,"sources":["App.js","index.js"],"names":["App","useState","person","setPerson","quote","setQuote","data","setData","useEffect","a","fetch","then","response","json","catch","error","console","getQuoteData","getQuote","arr","p","filter","item","name","q","quotes","Math","floor","random","length","className","defaultValue","onChange","e","target","value","map","index","onClick","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uQA0EeA,EAhEH,WACV,MAA4BC,mBAAS,YAArC,mBAAOC,EAAP,KAAeC,EAAf,KACA,EAA0BF,mBAAS,IAAnC,mBAAOG,EAAP,KAAcC,EAAd,KACA,EAAwBJ,mBAAS,IAAjC,mBAAOK,EAAP,KAAaC,EAAb,KAEAC,qBAAU,YACU,uCAAG,sBAAAC,EAAA,sEAEbC,MAAM,eACTC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAL,GAAI,OAAIC,EAAQD,MACrBQ,OAAM,SAAAC,GACLC,QAAQD,MAAM,UAAWA,MANV,2CAAH,qDAUlBE,KACC,IAGH,IAAMC,EAAW,SAAXA,IAEJ,IA5B0BC,EA4BpBC,EAAId,EAAKe,QAAO,SAAAC,GAAI,OAAIA,EAAKC,OAASrB,KAAQ,GAG9CsB,GA/BoBL,EA+BKC,EAAEK,QA9BtBC,KAAKC,MAAMD,KAAKE,SAAWT,EAAIU,SAgC1C,GAAIL,IAAMpB,EACR,OAAOc,IAGTb,EAASmB,IAiBX,OARAhB,qBAAU,WACJF,EAAKuB,QACPX,MAID,CAAChB,EAAQI,IAEPA,EAAKuB,OAGR,sBAAKC,UAAU,MAAf,UACE,8DACA,8BAAM1B,IACN,wBAAQ2B,aAAczB,EAAK,GAAI0B,SAAU,SAACC,GAlB5C9B,EAkBqE8B,EAlBrDC,OAAOC,QAkBrB,SACG7B,EAAK8B,KAAI,SAACd,EAAMe,GACf,OAAO,wBAAoBF,MAAOb,EAAKC,KAAhC,SAAuCD,EAAKC,MAA/Bc,QAGxB,wBAAQC,QAAS,kBAAMpB,KAAvB,4BAXqB,8CCrD3BqB,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.09df5662.chunk.js","sourcesContent":["import './App.css';\nimport { useEffect, useState } from 'react';\n\n// Utility fn to return a random item from an array.\nconst getRandomItemInArray = (arr) => {\n  const item = Math.floor(Math.random() * arr.length);\n  return arr[item];\n}\n\n// Render the App\nconst App = () => {\n  const [person, setPerson] = useState('Big Earl'); \n  const [quote, setQuote] = useState('');\n  const [data, setData] = useState([]);\n\n  useEffect(() => {\n    const getQuoteData = async () => {\n      // Static assets go in the public folder\n      await fetch('quotes.json')\n        .then(response => response.json())\n        .then(data => setData(data))\n        .catch(error => {\n          console.error('Ruh roh', error);\n        });\n    }\n\n    getQuoteData();\n  }, []);\n\n  // Return a random quote from our selected person.\n  const getQuote = () => {\n    // Selected person.\n    const p = data.filter(item => item.name === person)[0];\n    \n    // Selected quote.\n    const q = getRandomItemInArray(p.quotes);\n\n    if (q === quote) {\n      return getQuote();\n    }\n\n    setQuote(q);\n  }\n\n  // Handles changing the select element.\n  const handleSelectChange = (event) => {\n    setPerson(event.target.value);\n  }\n\n  // Load a quote when the person is set.\n  useEffect(() => {\n    if (data.length) {\n      getQuote();\n    }\n    \n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [person, data]);\n\n  if (!data.length) return <div>Loading...</div>\n\n  return (\n    <div className=\"App\">\n      <h1>Primal Tears Quote Generator</h1>\n      <div>{quote}</div>\n      <select defaultValue={data[0]} onChange={(e) => handleSelectChange(e)}>\n        {data.map((item, index) => {\n          return <option key={index} value={item.name}>{item.name}</option>\n        })}\n      </select>\n      <button onClick={() => getQuote()}>Get a Quote</button>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}